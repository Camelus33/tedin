# Habitus33 온톨로지 개발 원칙 (Ontology Development Principles)
_버전: 1.0.0_

## 1. 개요

이 문서는 Habitus33의 지식 그래프와 온톨로지를 개발하고 유지보수하는 과정에서 모든 개발자가 반드시 준수해야 할 핵심 아키텍처 원칙을 정의합니다. 이 원칙들은 우리 시스템의 **안전성, 효율성, 목표지향 명료성**을 보장하기 위해 수립되었습니다.

---

## 2. 핵심 원칙

### **원칙 1: 영속성 및 안정성 (Permanence & Stability)**

-   **정의:** 모든 온톨로지 자산(클래스, 속성 등)은 시간이 지나도 절대 변하지 않는 영구 식별자(Persistent URI)를 가져야 하며, 모든 변경사항은 시맨틱 버저닝(Semantic Versioning)으로 투명하게 관리되어야 합니다.
-   **왜 필요한가?**
    -   온톨로지는 여러 시스템과 데이터의 '의미'를 연결하는 기준점입니다. 이 기준점이 흔들리면 전체 시스템에 예측 불가능한 오류가 발생할 수 있습니다.
    -   외부 시스템이 우리 온톨로지를 안심하고 참조하고, 장기적으로 안정적인 데이터 통합을 가능하게 합니다.
-   **실행 방안:**
    -   **URI 정책:** 모든 온톨로지 URI는 `https://w3id.org/habitus33/ontology/` 체계를 따릅니다. (`w3id.org`는 커뮤니티 기반의 영구 URL 서비스입니다.)
    -   **버전 관리:** `X.Y.Z` 형식의 시맨틱 버저닝을 엄격히 준수합니다.
        -   `MAJOR (X)`: 하위 호환성이 깨지는 변경
        -   `MINOR (Y)`: 하위 호환성을 유지하는 기능 추가
        -   `PATCH (Z)`: 하위 호환성을 유지하는 버그 수정
    -   **명시:** 모든 온톨로지 파일에는 `owl:versionIRI` 속성을 사용하여 고유 버전 식별자를 명시합니다. (예: `<https://w3id.org/habitus33/ontology/core/1.0.0>`)

### **원칙 2: 상호운용성 및 효율성 (Interoperability & Efficiency)**

-   **정의:** 바퀴를 재발명하지 않습니다. 검증된 외부 표준 온톨로지를 적극적으로 재사용하여 개발 효율을 높이고, 다른 지식 시스템과의 데이터 교환 가능성을 극대화합니다.
-   **왜 필요한가?**
    -   '사람', '개념', '문서' 등 세상의 보편적인 개념을 우리만의 방식으로 다시 정의하는 것은 비효율적이며, '의미의 섬'을 만드는 지름길입니다.
    -   표준을 따르면, 외부의 방대한 지식그래프(예: DBpedia)와 우리의 지식을 연결할 수 있는 가능성이 열립니다.
-   **실행 방안:**
    -   **적극적 재사용:** `SKOS`(개념 체계), `FOAF`(친구의 친구, 인물), `DC Terms`(더블린 코어, 메타데이터) 등 국제 표준 온톨로지를 우선적으로 검토하고 가져와 사용합니다.
    -   **문서화:** 어떤 외부 온톨로지의 어떤 부분을 재사용하는지는 `REUSED_ONTOLOGIES.md` 문서에 명확히 기록하여 관리합니다.

### **원칙 3: 논리적 명료성 (Logical Clarity)**

-   **정의:** 우리의 모든 지식 표현은 최상위 온톨로지인 **BFO(Basic Formal Ontology)**의 엄격한 형식 논리 체계를 따릅니다. 이를 통해 '개념이 모호해서 발생하는 문제'를 원천적으로 차단합니다.
-   **왜 필요한가?**
    -   "이 메모는 '과정'인가, 아니면 '결과물'인가?" 와 같은 미묘하지만 중요한 구분을 명확히 하지 않으면, AI가 엉뚱한 추론을 할 수 있습니다. BFO는 이런 보편적 구분을 위한 검증된 틀을 제공합니다.
    -   개발자 간의 오해를 줄이고, 온톨로지의 모든 정의가 일관된 논리 위에 서 있도록 보장합니다.
-   **실행 방안:**
    -   **BFO 준수:** 우리 온톨로지의 최상위 클래스들은 반드시 BFO의 클래스(예: `bfo:Entity`, `bfo:Continuant`, `bfo:Occurrent`) 중 하나의 자식 클래스로 정의되어야 합니다.
    -   **정의 형식:** 모든 클래스 정의는 **`A는 B이다. 단, C라는 특징을 가진다.`** (Genus-Differentia)는 아리스토텔레스식 정의를 따라, 모호함 없이 명확하게 기술합니다.
