# 개념이해도 수치화 기능 개발 PRD

## 프로젝트 개요
Habitus33의 메모카드에 실시간 개념이해도 점수를 표시하여 강화 피드백 루프를 유도하는 기능을 개발합니다.

## 핵심 가치 제안
- 메모카드 1개 = 1개 개념
- 개념이해도 = 생각추가 + 메모진화 + 지식연결 + 플래시카드 + 태그활용 + 사용자평점
- 실시간 표시 = 즉시 피드백 = 강화 학습 루프

## 기능 요구사항

### 1. 백엔드 API 개발
- GET /api/notes/:noteId/concept-score: 개념이해도 점수 조회
- POST /api/notes/:noteId/update-score: 점수 업데이트
- 실시간 점수 계산 엔진
- 6개 영역별 점수 계산 (생각추가, 메모진화, 지식연결, 플래시카드, 태그활용, 사용자평점)

### 2. 프론트엔드 UI 개발
- 메모카드 우상단 점수 아이콘 (💡🧠🎯⭐)
- 클릭 시 상세 점수 팝업
- 6개 영역별 세부 점수 표시
- 퀵 액션 버튼들
- 색상 코딩 (빨강→주황→초록→파랑)

### 3. 점수 계산 알고리즘
- 생각추가 점수 (20점): 4단계 완성도 + 텍스트 길이
- 메모진화 점수 (20점): 4단계 완성 + 진화 속도
- 지식연결 점수 (20점): 연결 개수 + 다양성 + 품질
- 플래시카드 점수 (20점): 생성 + 복습 + 난이도
- 태그 활용 점수 (10점): 개수 + 품질 + 다양성
- 사용자 평점 점수 (10점): 평점 존재 + 높음 + 업데이트

### 4. 데이터베이스 스키마
- notes 테이블에 concept_score 필드 추가
- concept_scores 테이블 생성 (히스토리 추적)
- score_calculations 테이블 (계산 로직 버전 관리)

### 5. 성능 최적화
- 점수 계산 캐싱
- 실시간 업데이트 최적화
- 데이터베이스 인덱싱

### 6. 테스트 및 검증
- 단위 테스트 (점수 계산 로직)
- 통합 테스트 (API 엔드포인트)
- E2E 테스트 (UI 플로우)
- 성능 테스트 (실시간 계산)

## 기술 스택
- Backend: Node.js, Express, Prisma
- Frontend: React, TypeScript, Tailwind CSS
- Database: PostgreSQL
- Testing: Jest, React Testing Library

## 성공 지표
- 개념이해도 평균 점수
- 점수 향상률
- 액션 클릭률
- 학습 지속성
- 태그 활용률
- 평점 참여율

## 리스크 관리
- 과도한 게이미피케이션 방지
- 알고리즘 편향 최소화
- 성능 이슈 대응
- 점진적 롤아웃

## 개발 단계
1. Phase 1: 핵심 기능 (백엔드 API + 기본 UI)
2. Phase 2: 고도화 (팝업 + 퀵 액션)
3. Phase 3: 최적화 (개인화 + 성능) 