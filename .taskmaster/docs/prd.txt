# 프로젝트 요구사항 정의서 (PRD): 고급 마크다운 에디터 교체

## 1. 프로젝트 개요

### 1.1 프로젝트 목표
현재 summary-notes 페이지에서 사용 중인 기본 마크다운 에디터(@uiw/react-md-editor)를 Obsidian/Notion 수준의 고급 블록 기반 에디터(BlockNote)로 교체하여 사용자 경험을 혁신적으로 개선한다.

### 1.2 핵심 가치 제안
- Obsidian/Notion과 같은 현대적인 블록 기반 편집 환경 제공
- 슬래시(/) 커맨드를 통한 직관적인 블록 생성
- 드래그 앤 드롭을 통한 블록 재배치
- 기존 마크다운 콘텐츠와의 완전한 호환성
- 좌측 메모카드와 우측 에디터의 기존 레이아웃 유지

### 1.3 대상 사용자
- 지식 관리 및 문서 작성을 하는 모든 사용자
- 기존 서비스의 summary-notes 기능을 사용하는 사용자

## 2. 기능 요구사항

### 2.1 핵심 기능 (Phase 1: MVP)
1. **BlockNote 에디터 통합**
   - 기존 @uiw/react-md-editor를 BlockNote로 완전 교체
   - 기존 마크다운 콘텐츠의 자동 변환 및 호환성 보장
   - 편집된 내용의 마크다운 형식 저장

2. **블록 기반 편집**
   - 슬래시(/) 커맨드를 통한 블록 생성
   - 드래그 앤 드롭을 통한 블록 재배치
   - 기본 블록 타입 지원: 텍스트, 헤딩, 리스트, 인용구, 코드블록

3. **UI/UX 통합**
   - 기존 cyberTheme과의 완벽한 디자인 통합
   - 다크모드 기본 지원
   - 기존 2단 레이아웃(좌측 메모카드, 우측 에디터) 유지

4. **성능 최적화**
   - 빠른 로딩 속도
   - 실시간 편집 반응성
   - 대용량 문서 처리 능력

### 2.2 고도화 기능 (Phase 2: 향후 확장)
1. **지식 연결 기능**
   - 노트 간 연결 기능 ([[메모 제목]] 또는 @메모)
   - 백링크 시스템

2. **커스텀 블록**
   - TSNoteCard 미리보기 블록
   - 서비스 특화 블록 타입

3. **협업 기능**
   - 실시간 동시 편집
   - 댓글 및 제안 기능

## 3. 기술 요구사항

### 3.1 기술 스택
- **주요 라이브러리**: BlockNote (@blocknote/core, @blocknote/react, @blocknote/mantine)
- **프레임워크**: Next.js (기존)
- **스타일링**: TailwindCSS + 기존 cyberTheme
- **상태 관리**: React hooks (기존)

### 3.2 호환성 요구사항
- 기존 마크다운 콘텐츠와 100% 호환
- 기존 API 구조와의 완전한 호환성
- 기존 UI 컴포넌트와의 원활한 통합

### 3.3 성능 요구사항
- 에디터 로딩 시간: 2초 이내
- 타이핑 지연시간: 50ms 이내
- 대용량 문서(10,000자 이상) 처리 지원

## 4. 사용자 인터페이스 요구사항

### 4.1 레이아웃
- 기존 2단 레이아웃 유지 (좌측: 메모카드, 우측: 에디터)
- react-resizable-panels을 통한 크기 조절 기능 유지
- 모바일 반응형 디자인 지원

### 4.2 디자인 시스템
- 기존 cyberTheme 색상 팔레트 적용
- 다크모드 기본 지원
- 일관된 타이포그래피 및 간격

### 4.3 사용자 경험
- 직관적인 슬래시(/) 커맨드
- 드래그 앤 드롭을 통한 블록 재배치
- 키보드 단축키 지원
- 실시간 미리보기

## 5. 데이터 요구사항

### 5.1 데이터 변환
- 기존 마크다운 → BlockNote JSON 변환
- BlockNote JSON → 마크다운 변환
- 데이터 무결성 보장

### 5.2 저장 방식
- 기존 userMarkdownContent 필드 활용
- 백엔드 API 변경 없이 호환성 유지

## 6. 품질 요구사항

### 6.1 안정성
- 데이터 손실 방지
- 자동 저장 기능
- 오류 복구 메커니즘

### 6.2 사용성
- 학습 곡선 최소화
- 직관적인 인터페이스
- 접근성 지원

### 6.3 확장성
- 향후 기능 추가를 위한 확장 가능한 구조
- 플러그인 시스템 지원 가능성

## 7. 제약사항

### 7.1 기술적 제약사항
- Next.js SSR 환경에서의 클라이언트 전용 컴포넌트 처리
- 기존 API 구조 변경 금지
- 기존 UI 컴포넌트와의 호환성 유지

### 7.2 비즈니스 제약사항
- 기존 사용자 데이터 손실 방지
- 서비스 중단 시간 최소화
- 기존 워크플로우 유지

## 8. 성공 지표

### 8.1 기술적 지표
- 에디터 로딩 시간 개선: 현재 대비 50% 단축
- 사용자 타이핑 반응성: 50ms 이내
- 버그 발생률: 0.1% 미만

### 8.2 사용자 경험 지표
- 사용자 만족도 향상
- 문서 작성 효율성 증대
- 기능 사용률 증가

## 9. 위험 요소 및 대응 방안

### 9.1 기술적 위험
- **위험**: BlockNote와 기존 시스템 간 호환성 문제
- **대응**: 단계적 마이그레이션 및 충분한 테스트

### 9.2 사용자 경험 위험
- **위험**: 새로운 인터페이스에 대한 사용자 적응
- **대응**: 점진적 도입 및 사용자 가이드 제공

### 9.3 데이터 위험
- **위험**: 기존 마크다운 데이터 손실
- **대응**: 완전한 백업 및 롤백 계획

## 10. 일정 및 마일스톤

### Phase 1 (MVP): 4주
- Week 1: 환경 설정 및 기본 통합
- Week 2: 에디터 교체 및 기본 기능 구현
- Week 3: UI/UX 통합 및 테마 적용
- Week 4: 테스트 및 최적화

### Phase 2 (고도화): 추후 계획
- 지식 연결 기능
- 커스텀 블록 개발
- 협업 기능 추가 