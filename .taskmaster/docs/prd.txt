# Dashboard View Mode Enhancement PRD

## 1. 개요
Habitus33 대시보드의 메모카드 보기 옵션을 개선하여 사용자가 더 많은 메모를 효율적으로 탐색할 수 있도록 합니다.

## 2. 현재 상태
- 대시보드에 갤러리보기(grid)/리스트형 보기(list) 토글 버튼 존재
- 최근 3개 메모카드만 표시
- 포스트잇 스타일의 TSNoteCard 컴포넌트 사용

## 3. 목표
- 리스트형 보기를 "더보기" 옵션으로 변경
- 더보기 클릭 시 모든 메모카드를 1줄 6개 레이아웃으로 표시
- 카드 크기 축소 및 hover 시 확대 애니메이션 추가

## 4. 기술적 요구사항
- React/Next.js 기반 프론트엔드
- Tailwind CSS 스타일링
- 기존 TSNoteCard 컴포넌트 재사용
- 반응형 디자인 (6열 그리드)
- 부드러운 hover 애니메이션

## 5. 구현 세부사항
### 5.1 상태 관리
- viewMode: 'grid' | 'more'
- allMemos: 전체 메모 데이터 관리

### 5.2 데이터 로딩
- 기존 최근 3개 메모 로딩 유지
- 더보기 클릭 시 전체 메모 API 호출

### 5.3 UI 컴포넌트
- Grid 보기: 기존 3열 레이아웃 유지
- More 보기: 6열 그리드, 작은 카드 크기, hover 확대

### 5.4 애니메이션
- hover 시 scale-110 효과
- transition-all duration-300 ease-out

## 6. 성능 고려사항
- 전체 메모 로딩은 최초 한 번만 실행
- 레이아웃 시프트 최소화
- 메모리 효율적인 상태 관리

## 7. 접근성
- 키보드 네비게이션 지원
- 적절한 ARIA 레이블
- 색상 대비 및 가독성 유지

## 8. 오류 처리
- API 호출 실패 시 graceful fallback
- 메모 데이터 없을 때 적절한 메시지 표시
- 네트워크 오류 시 재시도 로직

# PDF 뷰어 연속 세로 스크롤 기능 구현 PRD

## 프로젝트 개요
현재 PDF 뷰어는 페이지별 네비게이션(이전/다음 버튼)을 사용하고 있습니다. 사용자가 요청한 것은 현대적인 PDF 뷰어처럼 마우스 휠을 이용한 연속 세로 스크롤 기능입니다.

## 기술 요구사항
- 기존 react-pdf 라이브러리 유지 (의존성 변경 최소화)
- 현재 하이라이트, 텍스트 선택 기능 보존
- IntersectionObserver를 이용한 성능 최적화
- 현재 페이지 추적 및 컨트롤 바 동기화

## 핵심 기능
1. **연속 페이지 렌더링**: 모든 페이지를 세로로 스택 배치
2. **Lazy Loading**: 뷰포트에 들어온 페이지만 렌더링하여 성능 최적화
3. **스크롤 기반 페이지 추적**: 스크롤 위치에 따른 현재 페이지 자동 업데이트
4. **기존 기능 호환성**: 하이라이트, 텍스트 선택, 줌, 회전 기능 유지

## 구현 범위
- PdfViewer.tsx 컴포넌트 수정
- 새로운 스크롤 모드 상태 추가
- IntersectionObserver 기반 페이지 가시성 관리
- 스크롤 컨테이너 높이 및 스타일 조정

## 성능 고려사항
- 대용량 PDF(100페이지 이상) 처리 가능
- 메모리 사용량 최적화
- 부드러운 스크롤 경험 제공

## 호환성 요구사항
- 기존 props 인터페이스 유지
- 하이라이트 오버레이 정상 작동
- 텍스트 선택 및 메모 기능 보존 