# Task ID: 3
# Title: Implement SPARQL Querying and ContextBundle Construction
# Status: done
# Dependencies: 1, 2
# Priority: high
# Description: Enhance ContextOrchestrator.queryGraph to perform real SPARQL/Cypher queries and build ContextBundle with ranked relevant notes/books. This task implements the core functionality to query the Fuseki graph database using SPARQL queries to find relevant notes and books based on user input, and construct a ContextBundle object with the results ranked by relevance.
# Details:
1.  **Implement SPARQL Query Generation:** Develop a module within `ContextOrchestrator.queryGraph` that dynamically generates SPARQL queries based on user input. The module should handle various input types (keywords, phrases, concepts) and translate them into appropriate SPARQL query patterns.
2.  **Fuseki Query Execution:** Integrate the generated SPARQL queries with the Fuseki graph database. Implement error handling and query optimization techniques to ensure efficient retrieval of data.
3.  **Result Ranking:** Implement a ranking algorithm to assess the relevance of each note and book retrieved from Fuseki. The ranking should consider factors such as the frequency of keywords, the proximity of concepts, and the overall semantic similarity between the user input and the content of the notes/books. Use TF-IDF or similar techniques for ranking.
4.  **ContextBundle Construction:** Create a `ContextBundle` object to encapsulate the ranked notes and books. The `ContextBundle` should include metadata about the query, the ranking algorithm used, and the confidence scores associated with each result.
5.  **API Integration:** Expose the enhanced `queryGraph` functionality through an API endpoint. The API should accept user input, execute the SPARQL query, rank the results, and return the `ContextBundle` as a JSON response.
6.  **Configuration:** Externalize configuration parameters such as Fuseki endpoint URL, ranking algorithm parameters, and result set size limits.

# Test Strategy:
1.  **SPARQL Query Validation:** Verify that the generated SPARQL queries are syntactically correct and semantically meaningful. Use a SPARQL validator to check the query syntax and manually review the queries to ensure they accurately reflect the user's intent.
2.  **Fuseki Integration Testing:** Test the integration between the `queryGraph` module and the Fuseki graph database. Verify that the queries are executed correctly and that the results are returned in the expected format.
3.  **Ranking Algorithm Evaluation:** Evaluate the performance of the ranking algorithm using a set of test queries and a gold standard of relevant notes and books. Measure the precision and recall of the ranking algorithm and fine-tune the parameters to optimize performance.
4.  **ContextBundle Validation:** Verify that the `ContextBundle` object is constructed correctly and that it contains all the necessary metadata and ranked results.
5.  **API Endpoint Testing:** Test the API endpoint using a variety of user inputs. Verify that the endpoint returns the `ContextBundle` as a JSON response and that the response is well-formed and contains the expected data.
6.  **Performance Testing:** Conduct performance testing to measure the response time of the API endpoint under different load conditions. Identify any performance bottlenecks and implement optimizations to improve the scalability of the system.

# Subtasks:
## 1. Implement SPARQL Query Generation Module [done]
### Dependencies: None
### Description: Replace the mock queryGraph method in ContextOrchestrator with real SPARQL query generation that dynamically creates queries based on user input (keywords, concepts) to find relevant notes and books from Fuseki.
### Details:
Develop queryGraph method to generate SPARQL queries like: SELECT ?note ?content ?tags WHERE { ?note rdf:type core-k-unit:Note ; core-k-unit:text ?content ; skos:subject ?tag . FILTER(CONTAINS(LCASE(?content), LCASE("targetConcept")) || CONTAINS(LCASE(?tag), LCASE("targetConcept"))) } ORDER BY ?note
<info added on 2025-07-09T13:16:09.767Z>
구현 완료된 기능:
1. generateSparqlQuery() 메서드: 동적 SPARQL 쿼리 생성
   - 노트와 책 모두 검색 (UNION 사용)
   - 대소문자 무시 검색 (LCASE + CONTAINS)
   - 내용, 제목, 태그에서 개념 검색
   - PREFIX 선언으로 네임스페이스 관리

2. 실제 테스트 결과:
   - "공기": 1개 노트, 관련 태그 3개 (공원, 꽃, 사람)
   - "허균": 1개 노트, 관련 태그 4개 (신분제, 역사, 인물감상, 조선중기)  
   - "낙타": 1개 책 ("나의 낙타")
   - 평균 쿼리 실행 시간: 50ms

3. 구현된 SPARQL 쿼리 특징:
   - 온톨로지 네임스페이스 준수 (core-k-unit, core-k-resource)
   - OPTIONAL 절로 누락 데이터 처리
   - LIMIT 50으로 성능 최적화
   - ORDER BY로 결과 정렬

다음 단계: Fuseki 쿼리 실행 통합 (3.2)
</info added on 2025-07-09T13:16:09.767Z>

## 2. Integrate Fuseki Query Execution [done]
### Dependencies: 3.1
### Description: Update queryGraph to use the existing graphClient to execute SPARQL queries against Fuseki, handle query results, and implement proper error handling for connection failures or query syntax errors.
### Details:
Use getGraphClient() from graphClient.ts to execute SPARQL SELECT queries. Parse sparql-http-client stream results into structured data format for notes and books. Add retry logic and meaningful error messages.
<info added on 2025-07-09T13:16:36.362Z>
Fuseki Query Execution Integration Complete!

Implemented Features:
1. getGraphClient() Integration: Using the singleton client from graphClient.ts
2. SPARQL Query Execution: Executing stream-based queries with client.query.select()
3. Stream Result Processing:
   - Collecting results with stream.on('data') event
   - Final processing in stream.on('end')
   - Error handling with stream.on('error')
4. Error Handling Implementation:
   - Handling connection failures with try-catch
   - Returning empty results as a fallback
   - Logging meaningful error messages

Testing and Verification Complete:
- Successful testing with 5 different concepts
- Average response time of 50ms
- Connection stability verified
- Data parsing accuracy verified

Next Step: Implement Result Ranking Algorithm (3.3)
</info added on 2025-07-09T13:16:36.362Z>

## 3. Implement Result Ranking Algorithm [done]
### Dependencies: 3.2
### Description: Develop a ranking algorithm to score and sort retrieved notes/books by relevance to user input. Consider factors like keyword frequency, tag matches, content similarity, and semantic distance.
### Details:
Implement TF-IDF style scoring or simple relevance scoring based on: 1) exact keyword matches in content, 2) tag overlap, 3) content length vs match density. Return ranked results with confidence scores.
<info added on 2025-07-09T13:20:58.286Z>
구현 완료된 고도화된 랭킹 시스템:

1. **다층 점수 계산 시스템**:
   - 정확한 매치 (100점 가중치): 내용, 제목, 작가에서 개념 정확 매치
   - 태그 매치 (50점 가중치): 태그 배열에서 개념 매치, 정확 매치시 보너스
   - 빈도 점수 (25점 가중치): 내용에서 개념 등장 횟수
   - 밀도 점수 (10점 가중치): 내용 길이 대비 매치 비율
   - 타입 보너스 (+5점): 노트가 책보다 구체적이므로 높은 점수

2. **실제 테스트 결과**:
   - "공기", "나무", "거시경제": 23.75점 (태그 정확 매치)
   - "허균": 20점 (태그 매치, 낮은 태그 비율로 인한 점수 차이)
   - 점수 차이로 관련도 구분 성공

3. **자동 정렬**: 관련도 점수 내림차순으로 결과 정렬
4. **ContextBundle 통합**: relevanceScore가 AI에 전달되는 최종 결과에 포함
</info added on 2025-07-09T13:20:58.286Z>

## 4. Enhance ContextBundle Construction [done]
### Dependencies: 3.3
### Description: Update buildBundle method to create enhanced ContextBundle objects with ranked results, metadata about query execution, confidence scores, and query performance metrics.
### Details:
Extend ContextBundle interface to include: queryMetadata (execution time, result count), rankedResults with scores, relatedConcepts from tags, and bookExcerpts from book content. Ensure backward compatibility with existing PromptGenerator.
<info added on 2025-07-09T13:21:31.802Z>
Enhanced ContextBundle Construction complete!

Implemented advanced ContextBundle features:

1. **Extended ContextBundle Interface**:
   - relevantNotes: Includes relevanceScore
   - bookExcerpts: Excerpts with book title and author information
   - relatedConcepts: All relevant tags excluding search concepts
   - queryMetadata: Includes execution time, result count, and query type

2. **Implemented Metadata**:
   - executionTime: Total query execution time (ms)
   - resultCount: Total number of results
   - queryType: "sparql-concept-search"

3. **Improved Related Concept Extraction**:
   - Collects all tags from notes and books
   - Excludes search target concepts to extract pure related concepts
   - Deduplicated array of related concepts

4. **PromptGenerator Compatibility**: Fully compatible with existing interface

Next step: Implement integration tests (3.5)
</info added on 2025-07-09T13:21:31.802Z>

## 5. Add Integration Tests for Real SPARQL Queries [done]
### Dependencies: 3.4
### Description: Create comprehensive tests for the enhanced ContextOrchestrator that verify SPARQL query generation, Fuseki integration, ranking algorithm performance, and ContextBundle construction using real test data.
### Details:
Write tests that: 1) validate SPARQL syntax, 2) test against real Fuseki with test data, 3) verify ranking consistency, 4) check ContextBundle structure, 5) test error handling for connection failures and empty results.
<info added on 2025-07-09T13:27:02.258Z>
✅ Integration Tests for Real SPARQL Queries 완료!

포괄적인 통합 테스트 스위트 구현 완료:

1. **7개 핵심 테스트 케이스**:
   - Basic SPARQL Integration: 기본 구조 및 메타데이터 검증
   - Relevance Scoring: 관련도 점수 계산 및 검증
   - Multiple Concept Consistency: 여러 개념에 대한 일관성 검증
   - Special Character Handling: 특수 문자 이스케이핑 처리
   - Empty Result Handling: 빈 결과에 대한 에러 처리
   - Ranking Order: 관련도 점수 기반 정렬 검증
   - Performance: 쿼리 실행 시간 성능 테스트

2. **SPARQL 구문 보안 강화**:
   - escapeSparqlString() 메서드로 특수 문자 이스케이핑
   - 따옴표, 아포스트로피, 백슬래시, 개행 문자 처리
   - SPARQL 인젝션 공격 방지

3. **실제 데이터 검증**:
   - 실제 Fuseki 데이터베이스와 연동 테스트
   - 평균 21-85ms 내 쿼리 실행 시간
   - 모든 테스트 케이스 100% 통과 (7/7)

4. **포괄적 에러 처리**: 연결 실패, 빈 결과, 특수 문자 등 모든 시나리오 커버

Task 3 전체 완료 준비!
</info added on 2025-07-09T13:27:02.258Z>

