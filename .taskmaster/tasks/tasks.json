{
  "master": {
    "tasks": [
      {
        "id": 36,
        "title": "Initialize Next.js 13+ Project with Tailwind CSS",
        "description": "Set up the Next.js 13+ project with TypeScript and Tailwind CSS, ensuring the App Router is configured correctly.",
        "details": "1.  Initialize a new Next.js project using `create-next-app` with the `--typescript` flag.\n2.  Install Tailwind CSS and configure it according to the Next.js documentation (using `tailwindcss init -p`).\n3.  Verify that the project is using Next.js 13+ and React 18+.\n4.  Structure the project directory according to best practices for Next.js 13+ with the App Router (e.g., using the `app/` directory for routes).\n\n```bash\nnpx create-next-app@latest habitus33-dashboard --typescript\ncd habitus33-dashboard\nnpm install -D tailwindcss postcss autoprefixer\nnpx tailwindcss init -p\n```\n\nUpdate `tailwind.config.js`:\n\n```javascript\n/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  content: [\n    './app/**/*.{js,ts,jsx,tsx,mdx}',\n    './pages/**/*.{js,ts,jsx,tsx,mdx}',\n    './components/**/*.{js,ts,jsx,tsx,mdx}',\n    // Or if using `src` directory:\n    './src/**/*.{js,ts,jsx,tsx,mdx}',\n  ],\n  theme: {\n    extend: {},\n  },\n  plugins: [],\n}\n```\n<info added on 2025-07-06T08:50:07.718Z>\n## Potential Errors and Solutions\n\n1.  **TypeScript Version Compatibility Error**: When using async Server Components in Next.js 13+ App Router, a \"'Promise<Element>' is not a valid JSX element\" error may occur.\n    -   Solution: Upgrade to TypeScript 5.1.3 or later and @types/react 18.2.8 or later, or temporarily use the `@ts-expect-error` comment.\n\n2.  **Fragment Export Error**: A \"has an invalid default export: Type\" error may occur.\n    -   Solution: Use an array (`[]`) instead of a React Fragment (`<>`), or wrap it with a single JSX element.\n\n## Best Practices\n\nAccording to the Next.js official documentation, when configuring TypeScript, you should enable `\"strict\": true` in `tsconfig.json` and use the `next.config.ts` file to ensure type safety.\n</info added on 2025-07-06T08:50:07.718Z>",
        "testStrategy": "1.  Run the development server (`npm run dev`) and ensure the application starts without errors.\n2.  Verify that Tailwind CSS styles are applied correctly by adding a simple Tailwind class to a component and checking if it renders as expected.",
        "priority": "high",
        "dependencies": [],
        "status": "done",
        "subtasks": [
          {
            "id": 1,
            "title": "Initialize Next.js project with TypeScript",
            "description": "Use `create-next-app` to initialize a new Next.js project with TypeScript support. Verify the project uses Next.js 13+ and React 18+.",
            "dependencies": [],
            "details": "Execute `npx create-next-app@latest habitus33-dashboard --typescript` and confirm the Next.js and React versions in `package.json`.",
            "status": "done",
            "testStrategy": "Check `package.json` for Next.js version 13 or higher and React version 18 or higher. Run `npm run dev` and verify the application starts without errors."
          },
          {
            "id": 2,
            "title": "Install Tailwind CSS, PostCSS, and Autoprefixer",
            "description": "Install Tailwind CSS and its peer dependencies (PostCSS and Autoprefixer) using npm.",
            "dependencies": [
              1
            ],
            "details": "Run `npm install -D tailwindcss postcss autoprefixer` in the project directory.",
            "status": "done",
            "testStrategy": "Check `package.json` to ensure Tailwind CSS, PostCSS, and Autoprefixer are listed as devDependencies."
          },
          {
            "id": 3,
            "title": "Configure Tailwind CSS",
            "description": "Initialize Tailwind CSS configuration file and update the `tailwind.config.js` file to include the necessary content paths.",
            "dependencies": [
              2
            ],
            "details": "Run `npx tailwindcss init -p` and update `tailwind.config.js` with the provided content paths.",
            "status": "done",
            "testStrategy": "Inspect `tailwind.config.js` to ensure the content array includes the correct paths for `app`, `pages`, `components`, and `src` directories."
          },
          {
            "id": 4,
            "title": "Address TypeScript Version Compatibility",
            "description": "Upgrade TypeScript and @types/react to resolve potential compatibility issues with async Server Components in Next.js 13+ App Router.",
            "dependencies": [
              1
            ],
            "details": "Upgrade to TypeScript 5.1.3 or later and @types/react 18.2.8 or later using npm. If upgrading is not feasible, temporarily use the `@ts-expect-error` comment.",
            "status": "done",
            "testStrategy": "Check TypeScript and @types/react versions in `package.json`. Run the application and verify that no TypeScript-related errors occur, especially when using async Server Components."
          },
          {
            "id": 5,
            "title": "Verify Tailwind CSS Integration",
            "description": "Create a simple component and apply Tailwind CSS classes to verify that Tailwind CSS is correctly integrated and styled.",
            "dependencies": [
              3
            ],
            "details": "Create a new component in the `app/` directory (e.g., `app/components/TestComponent.tsx`) and apply Tailwind CSS classes to it. Import and render this component in a page (e.g., `app/page.tsx`).",
            "status": "done",
            "testStrategy": "Run the application and inspect the rendered component in the browser. Verify that the Tailwind CSS classes are applied correctly and the component is styled as expected."
          }
        ]
      },
      {
        "id": 37,
        "title": "Implement Header Section",
        "description": "Implement the header section with the Habitus33 logo (left), settings button (right), and user profile image button (right).",
        "details": "1.  Create a `Header` component in the `components/` directory.\n2.  Add the Habitus33 logo using an `<img>` tag or a `<Image>` component from `next/image` for optimized image loading.\n3.  Implement the settings and user profile image buttons using `<button>` elements.\n4.  Use Tailwind CSS to style the header and its elements, ensuring proper alignment and spacing.\n5.  Position the logo on the left and the buttons on the right using Flexbox or Grid.\n\n```jsx\n// components/Header.tsx\nimport Image from 'next/image';\n\nconst Header = () => {\n  return (\n    <header className=\"bg-white shadow-md py-4 px-6 flex items-center justify-between\">\n      <Image src=\"/habitus33-logo.svg\" alt=\"Habitus33 Logo\" width={100} height={30} />\n      <div className=\"flex items-center space-x-4\">\n        <button>Settings</button>\n        <button>Profile</button>\n      </div>\n    </header>\n  );\n};\n\nexport default Header;\n```\n<info added on 2025-07-06T08:50:42.231Z>\nPossible Errors and Solutions for Task 37:\n\n1.  **Complex Component Structure Error**: The \"functions properties\" syntax can be confusing when storing functions as properties of an object in the React header component.\n    -   Solution: Export a base object and include each component as a property. Access them as `Header.Root`, `Header.Logo`, etc., for clarity.\n\n2.  **User Profile Button Accessibility Error**: The user settings button may lack `aria-label` or `role` attributes, preventing screen reader users from understanding the button's purpose.\n    -   Solution: Add accessibility attributes such as `aria-label=\"User Settings\"`, `role=\"button\"`, and `tabindex=\"0\"` and ensure keyboard navigation is supported.\n\nBest Practices: According to TailGrids and the Primer design system, header components should clearly separate the logo, navigation, and user action areas, and responsive design and accessibility should be considered.\n</info added on 2025-07-06T08:50:42.231Z>\n<info added on 2025-07-06T08:56:13.372Z>\nTask 37 Complete: Implemented a NotebookLM-style header.\n- Habitus33 logo on the left.\n- Settings button on the right (gear icon + \"Settings\" text).\n- User profile image button on the right (with dropdown menu).\n- Clean white background with a gray border.\n- Accessibility considerations (aria-label, keyboard navigation).\n- Mobile-responsive design applied.\n\nNext Steps: Implement the main area (status message, create new, recent notes, library button).\n</info added on 2025-07-06T08:56:13.372Z>",
        "testStrategy": "1.  Verify that the logo, settings button, and user profile image button are displayed correctly in the header.\n2.  Check that the header is styled according to the design specifications.\n3.  Ensure that the logo is clickable (if it's a link) and the buttons are functional (e.g., by adding a `console.log` statement to their `onClick` handlers).",
        "priority": "high",
        "dependencies": [
          36
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 38,
        "title": "Implement Main Area",
        "description": "Implement the main area, including the user status message, 'Create New' button, recent memos section (with card/list view toggle and sort dropdown), and 'My Library' button.",
        "details": "1.  Create a `MainArea` component.\n2.  Fetch the user's name and memo count from the existing API endpoint and display the status message.\n3.  Implement the 'Create New' button using a `<button>` element.\n4.  Create a `RecentMemos` component to display the recent memos.\n5.  Implement the card/list view toggle using a state variable and conditional rendering.\n6.  Implement the sort dropdown using a `<select>` element and a state variable to track the selected sort order.\n7.  Fetch the recent memos from the existing API endpoint and display them as cards or a list.\n8.  Implement the 'My Library' button using a `<button>` element.\n\n```jsx\n// components/MainArea.tsx\nimport { useState, useEffect } from 'react';\n\nconst MainArea = () => {\n  const [memoCount, setMemoCount] = useState(0);\n  const [viewMode, setViewMode] = useState('card'); // 'card' or 'list'\n  const [sortOrder, setSortOrder] = useState('latest');\n\n  useEffect(() => {\n    // Fetch memo count from API\n    setMemoCount(5); // Example\n  }, []);\n\n  return (\n    <main className=\"p-6\">\n      <p>[사용자이름]님, 현재 {memoCount}개의 메모를 만들었습니다.</p>\n      <button>+ 새로 만들기</button>\n      <section>\n        <h2>최근 메모</h2>\n        <button onClick={() => setViewMode(viewMode === 'card' ? 'list' : 'card')}>Toggle View</button>\n        <select value={sortOrder} onChange={(e) => setSortOrder(e.target.value)}>\n          <option value=\"latest\">최신순</option>\n          {/* Add other sort options */}\n        </select>\n        {/* Render recent memos based on viewMode and sortOrder */}\n        <button>나의 도서관</button>\n      </section>\n    </main>\n  );\n};\n\nexport default MainArea;\n```\n<info added on 2025-07-06T08:51:03.822Z>\nPossible Errors and Solutions for Task 38:\n\n1. **Card/List View Toggle State Error**: A \"Cannot read property 'map' of undefined\" error may occur if the initial value of useState in the view toggle button is undefined or set to an incorrect type.\n   - Solution: Define the initial state clearly and use conditional rendering. Use the `{data?.length > 0 && data.map(...)}` pattern for safe rendering.\n\n2. **Memo Card Key Property Error**: A \"Each child in a list should have a unique key prop\" warning may occur if the key prop is missing or duplicated in the memo card list.\n   - Solution: Use a unique ID as the key for each memo card. If an ID is not available, generate a UUID or unique identifier.\n\nBest Practices: According to the React documentation, avoid using array indices as keys when rendering lists. Use stable and unique identifiers instead.\n</info added on 2025-07-06T08:51:03.822Z>",
        "testStrategy": "1.  Verify that the user status message displays the correct user name and memo count.\n2.  Check that the 'Create New' button is functional.\n3.  Ensure that the recent memos are displayed correctly in both card and list views.\n4.  Verify that the sort dropdown correctly sorts the memos.\n5.  Check that the 'My Library' button is functional.",
        "priority": "high",
        "dependencies": [
          37
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 39,
        "title": "Implement Scroll Area",
        "description": "Implement the scroll area with three summary notes, Zengo/Zengo Myverse buttons, and an 'Cognitive Analysis' button.",
        "details": "1.  Create a `ScrollArea` component.\n2.  Fetch three summary notes from the existing API endpoint and display them.\n3.  Implement the Zengo/Zengo Myverse buttons using `<button>` elements.\n4.  Implement the 'Cognitive Analysis' button using a `<button>` element.\n\n```jsx\n// components/ScrollArea.tsx\nimport { useEffect, useState } from 'react';\n\nconst ScrollArea = () => {\n  const [summaryNotes, setSummaryNotes] = useState([]);\n\n  useEffect(() => {\n    // Fetch summary notes from API\n    setSummaryNotes([{}, {}, {}]); // Example\n  }, []);\n\n  return (\n    <div className=\"p-6\">\n      <section>\n        <h2>단권화 노트</h2>\n        {summaryNotes.map((note, index) => (\n          <div key={index}>Summary Note</div> // Replace with actual note component\n        ))}\n      </section>\n      <button>Zengo / Zengo Myverse</button>\n      <button>인지 분석</button>\n    </div>\n  );\n};\n\nexport default ScrollArea;\n```\n<info added on 2025-07-06T08:51:18.057Z>\nPossible Errors and Solutions for Task 39:\n\n1.  **Summary Notes API Call Error**: A \"404 Not Found\" or \"Network Error\" may occur due to a non-existent or incorrect API endpoint when fetching summary notes data.\n    -   Solution: Verify the API endpoint and use a try-catch block to handle errors. Implement components to display loading and error states.\n\n2.  **Scroll Area Rendering Error**: Components in the scroll area may not render due to incorrect conditional rendering or a \"Cannot read property of null\" error.\n    -   Solution: Provide appropriate fallback UI for each section and handle empty states when data is unavailable.\n\nBest Practices: Use data fetching libraries like React Query or SWR to automatically manage loading, error, and success states, and provide skeleton UI to improve user experience.\n</info added on 2025-07-06T08:51:18.057Z>",
        "testStrategy": "1.  Verify that the three summary notes are displayed correctly.\n2.  Check that the Zengo/Zengo Myverse buttons and the 'Cognitive Analysis' button are functional.",
        "priority": "medium",
        "dependencies": [
          38
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 40,
        "title": "Integrate Components into Dashboard Layout",
        "description": "Integrate all components into the main dashboard layout, ensuring proper structure and responsiveness.",
        "details": "1.  Create a `DashboardLayout` component in the `app/` directory.\n2.  Import the `Header`, `MainArea`, and `ScrollArea` components.\n3.  Arrange the components in the desired layout using Flexbox or Grid.\n4.  Use Tailwind CSS to style the layout and ensure it is responsive on different screen sizes.\n\n```jsx\n// app/page.tsx\nimport Header from '@/components/Header';\nimport MainArea from '@/components/MainArea';\nimport ScrollArea from '@/components/ScrollArea';\n\nexport default function Dashboard() {\n  return (\n    <div className=\"flex flex-col h-screen\">\n      <Header />\n      <div className=\"flex-grow overflow-y-auto\">\n        <MainArea />\n        <ScrollArea />\n      </div>\n    </div>\n  );\n}\n```\n<info added on 2025-07-06T08:51:32.902Z>\nPossible Errors and Solutions for Task 40:\n\n1.  **Mobile Responsive Layout Error**: Incorrect application of Tailwind CSS responsive classes may cause headers or buttons to overlap or be displayed outside the screen on mobile devices.\n    -   Solution: Use responsive prefixes such as `sm:`, `md:`, and `lg:` correctly and apply a mobile-first approach. Test various screen sizes in Chrome DevTools' responsive mode.\n\n2.  **CSS Class Conflict Error**: Conflicts between existing styles and new Tailwind classes may result in unexpected styling.\n    -   Solution: Check CSS specificity and use `!important` or Tailwind's `!` prefix if necessary. Isolate styles to avoid conflicts with existing CSS.\n\nBest Practices: According to the official Tailwind CSS documentation, design with a mobile-first approach for responsive design and separate styles by component to increase maintainability.\n</info added on 2025-07-06T08:51:32.902Z>",
        "testStrategy": "1.  Verify that all components are displayed correctly in the dashboard layout.\n2.  Check that the layout is responsive on different screen sizes.\n3.  Ensure that the components are arranged in the desired order and with proper spacing.",
        "priority": "high",
        "dependencies": [
          37,
          38,
          39
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 41,
        "title": "Implement Responsive Design",
        "description": "Ensure the dashboard is fully responsive and adapts to different screen sizes, adhering to mobile-first principles.",
        "details": "1.  Use Tailwind CSS's responsive modifiers (e.g., `sm:`, `md:`, `lg:`) to adjust the layout and styling of the components on different screen sizes.\n2.  Test the dashboard on different devices and screen sizes using browser developer tools or real devices.\n3.  Ensure that the layout is fluid and adapts to different screen orientations.\n\n```jsx\n// Example using Tailwind CSS responsive modifiers\n<div className=\"flex flex-col md:flex-row\">\n  <div className=\"w-full md:w-1/4\">{/* Sidebar */}</div>\n  <div className=\"w-full md:w-3/4\">{/* Main Content */}</div>\n</div>\n```\n<info added on 2025-07-06T08:51:48.359Z>\nPossible Errors and Solutions for Task 41:\n\n1. **API Endpoint Connection Error**: Encountering \"Access to fetch blocked by CORS policy\" or \"401 Unauthorized\" errors due to CORS issues or expired authentication tokens when connecting to existing APIs.\n   - Solution: Use Next.js API Routes to set up a proxy or verify CORS settings on the server side. Implement token refresh logic to manage authentication status.\n\n2. **Data Format Mismatch Error**: Receiving \"Cannot read property 'length' of undefined\" errors because the data format returned by the API differs from what the component expects.\n   - Solution: Define TypeScript interfaces to clarify data types and use data transformation functions to convert data into a consistent format.\n\nBest Practices: Implement common error handling using Axios interceptors or React Query's error handling during API integration. Use schema validation libraries like Zod or Yup for data validation.\n</info added on 2025-07-06T08:51:48.359Z>",
        "testStrategy": "1.  Test the dashboard on different devices and screen sizes using browser developer tools or real devices.\n2.  Verify that the layout adapts correctly to different screen sizes and orientations.\n3.  Ensure that all components are visible and functional on all screen sizes.",
        "priority": "high",
        "dependencies": [
          40
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 42,
        "title": "Optimize Performance",
        "description": "Optimize the dashboard for performance, ensuring fast loading times and smooth interactions.",
        "details": "1.  Use code splitting to reduce the initial load time of the dashboard.\n2.  Optimize images using `next/image`.\n3.  Use lazy loading for components that are not immediately visible.\n4.  Monitor the dashboard's performance using browser developer tools or a performance monitoring tool like Google PageSpeed Insights.\n\n```jsx\n// Example using next/image\nimport Image from 'next/image';\n\n<Image src=\"/my-image.jpg\" alt=\"My Image\" width={500} height={300} priority />\n```\n<info added on 2025-07-06T08:52:01.748Z>\nPossible Errors and Solutions for Task 42:\n\n1. **Jest Test Environment Configuration Error**: Conflicts between Next.js 13+ App Router and Jest configuration may cause \"Cannot resolve module\" or \"Unexpected token\" errors.\n   - Solution: Configure Next.js settings correctly in jest.config.js and set up @testing-library/jest-dom. Use moduleNameMapping to resolve absolute paths.\n\n2. **Component Test Rendering Error**: If a component depends on Context or Router, a \"Cannot read property of undefined\" error may occur.\n   - Solution: Wrap the required Provider in the test and provide mock data. Customize the render function to automatically provide common Providers.\n\nBest Practice: Follow React Testing Library's principle of \"test the way your users interact\" and write tests that focus on user behavior rather than implementation details.\n</info added on 2025-07-06T08:52:01.748Z>",
        "testStrategy": "1.  Measure the dashboard's loading time using browser developer tools or Google PageSpeed Insights.\n2.  Verify that images are optimized and lazy-loaded correctly.\n3.  Ensure that the dashboard is responsive and interactive.",
        "priority": "medium",
        "dependencies": [
          40
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 43,
        "title": "Ensure Accessibility",
        "description": "Ensure the dashboard is accessible to users with disabilities, following accessibility best practices.",
        "details": "1.  Use semantic HTML elements.\n2.  Provide alternative text for images.\n3.  Use ARIA attributes to improve the accessibility of interactive elements.\n4.  Ensure that the dashboard is keyboard-accessible.\n5.  Test the dashboard's accessibility using an accessibility testing tool like Axe or WAVE.\n\n```jsx\n// Example using ARIA attributes\n<button aria-label=\"Close\">Close</button>\n```\n<info added on 2025-07-06T08:52:22.209Z>\nPossible errors and solutions for Task 43:\n\n1. **Test environment setup error**: A \"Module not found\" error may occur due to an incorrect setupFilesAfterEnv path or missing polyfills in Jest and React Testing Library configurations.\n   - Solution: Correctly set the setupFilesAfterEnv path in jest.config.js and add jsdom environment and TextEncoder/TextDecoder polyfills if necessary.\n\n2. **Asynchronous test timing error**: \"act()\" warnings or \"Can't perform a React state update on an unmounted component\" errors may occur when testing API calls or state updates.\n   - Solution: Use waitFor and findBy* queries to wait for asynchronous operations correctly, and cancel pending requests in the cleanup function.\n\nBest practices: Follow the \"Arrange-Act-Assert\" pattern, ensure each test is independent and isolated, and use test doubles (mock, stub) appropriately to control external dependencies.\n</info added on 2025-07-06T08:52:22.209Z>",
        "testStrategy": "1.  Test the dashboard's accessibility using an accessibility testing tool like Axe or WAVE.\n2.  Verify that the dashboard is keyboard-accessible.\n3.  Ensure that all elements have appropriate ARIA attributes.",
        "priority": "medium",
        "dependencies": [
          40
        ],
        "status": "done",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-07-05T04:59:08.393Z",
      "updated": "2025-07-06T08:57:03.391Z",
      "description": "Tasks for master context"
    }
  }
}