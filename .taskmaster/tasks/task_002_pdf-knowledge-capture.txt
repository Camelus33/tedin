# Task ID: 2
# Title: Implement PDF Upload Book Registration UI
# Status: done
# Dependencies: 1
# Priority: high
# Description: Implement the UI for registering books via PDF upload, adding a 'Register via PDF' tab to the existing book registration page. This includes file upload, drag-and-drop functionality, and automatic metadata extraction using pdf.js.
# Details:
1.  Modify the existing book registration page to include a new tab labeled 'Register via PDF'.
2.  Implement a file upload component within the 'Register via PDF' tab, allowing users to select PDF files from their local system.
3.  Implement drag-and-drop functionality for PDF files onto the upload component.
4.  Integrate pdf.js to extract metadata from the uploaded PDF file, including title, author, and other relevant information.
5.  Automatically populate the corresponding form fields on the book registration page with the extracted metadata.
6.  Handle cases where metadata extraction fails or is incomplete, providing users with the option to manually enter the missing information.
7.  Ensure the UI is responsive and handles large PDF files efficiently, providing appropriate loading indicators.
8.  Implement client-side validation to ensure that only PDF files are accepted.
9.  Consider accessibility requirements when designing the UI, ensuring it is usable by people with disabilities.

# Test Strategy:
1.  Upload a variety of PDF files with different metadata structures.
2.  Verify that the metadata is correctly extracted and populated into the corresponding form fields.
3.  Test the drag-and-drop functionality with different PDF files.
4.  Test the UI with large PDF files to ensure it remains responsive.
5.  Verify that the client-side validation prevents non-PDF files from being uploaded.
6.  Manually enter data into the form fields and submit the form to ensure that the data is correctly saved.
7.  Test the UI on different browsers and devices to ensure compatibility.
8.  Verify that the UI is accessible to users with disabilities, using assistive technologies such as screen readers.

# Subtasks:
## 1. PDF.js 라이브러리 설치 및 설정 [done]
### Dependencies: None
### Description: PDF 메타데이터 추출을 위한 PDF.js 라이브러리를 프론트엔드에 설치하고 설정합니다.
### Details:
- npm install pdfjs-dist 실행
- PDF.js worker 설정
- TypeScript 타입 정의 추가
- 기본 PDF 파싱 함수 구현
<info added on 2025-07-07T03:26:31.637Z>
**구현 내용:**
1. ✅ pdfjs-dist 라이브러리 설치 완료
2. ✅ @types/pdfjs-dist TypeScript 타입 정의 설치 완료
3. ✅ frontend/lib/pdfUtils.ts 파일 생성
4. ✅ PDF.js worker 설정 구현
5. ✅ PDF 메타데이터 추출 함수 구현
6. ✅ PDF 파일 유효성 검사 함수 구현
7. ✅ 파일 크기 포맷팅 유틸리티 함수 구현

**주요 기능:**
- extractPdfMetadata(): PDF에서 제목, 저자, 페이지 수 추출
- validatePdfFile(): PDF 파일 유효성 검사 (타입, 크기, 확장자)
- formatFileSize(): 파일 크기를 읽기 쉬운 형태로 변환
- 20MB 파일 크기 제한
- 에러 핸들링 및 폴백 로직 포함

**TypeScript 타입:**
- PdfMetadata 인터페이스
- PdfExtractionResult 인터페이스
- 완전한 타입 안전성 보장
</info added on 2025-07-07T03:26:31.637Z>

## 2. PDF 업로드 UI 컴포넌트 생성 [done]
### Dependencies: 2.1
### Description: 드래그앤드롭 기능이 포함된 PDF 업로드 UI 컴포넌트를 생성합니다.
### Details:
- PdfUploadComponent.tsx 파일 생성
- 드래그앤드롭 기능 구현
- PDF 파일 검증 로직
- 업로드 진행상태 표시
- 에러 핸들링 UI
<info added on 2025-07-07T03:28:14.881Z>
**구현 내용:**
1. ✅ PdfUploadComponent.tsx 컴포넌트 생성 완료
2. ✅ 드래그앤드롭 기능 구현
3. ✅ PDF 파일 검증 로직 구현
4. ✅ 업로드 진행상태 표시 구현
5. ✅ 에러 핸들링 UI 구현
6. ✅ 메타데이터 표시 UI 구현

**주요 기능:**
- 클릭 또는 드래그앤드롭으로 PDF 파일 업로드
- 실시간 파일 유효성 검증 (타입, 크기, 확장자)
- PDF 메타데이터 자동 추출 및 표시
- 로딩 상태 및 진행률 표시
- 상세한 에러 메시지 및 경고
- 업로드된 파일 정보 미리보기
- 파일 제거 기능

**UI/UX 특징:**
- Habitus33 사이버펑크 테마 적용
- 반응형 디자인
- 접근성 고려 (키보드 네비게이션, 스크린 리더)
- 직관적인 아이콘 및 상태 표시
- 부드러운 애니메이션 효과

**기술적 특징:**
- TypeScript 완전 지원
- React hooks 활용 (useState, useRef, useCallback)
- 메모리 누수 방지
- 에러 경계 처리
- 컴포넌트 재사용성 고려
</info added on 2025-07-07T03:28:14.881Z>

## 3. PDF 메타데이터 추출 함수 구현 [done]
### Dependencies: 2.1
### Description: PDF.js를 사용하여 PDF 파일에서 메타데이터(제목, 저자, 페이지 수)를 추출하는 함수를 구현합니다.
### Details:
- extractPdfMetadata 함수 구현
- PDF 문서 정보 파싱
- 제목, 저자, 페이지 수 추출
- 에러 핸들링 및 폴백 로직
- TypeScript 타입 정의

## 4. 기존 책 등록 페이지에 PDF 업로드 기능 통합 [done]
### Dependencies: 2.2, 2.3
### Description: 기존 /books/new/page.tsx에 PDF 업로드 기능을 통합하고 자동 폼 채우기 기능을 구현합니다.
### Details:
- 기존 폼에 PDF 업로드 섹션 추가
- PDF 업로드 시 자동 폼 필드 채우기
- 수동 입력과 PDF 업로드 방식 병행 지원
- 반응형 레이아웃 조정
- 상태 관리 로직 구현
<info added on 2025-07-07T03:31:31.278Z>
**구현 내용:**
1. ✅ 기존 책 등록 페이지에 PDF 업로드 기능 통합 완료
2. ✅ PDF 업로드 상태 관리 추가 (pdfFile, pdfMetadata, inputMethod)
3. ✅ PDF 업로드 핸들러 함수 구현 (handlePdfSelected, handlePdfError, clearPdfFile)
4. ✅ 자동 폼 채우기 기능 구현 (제목, 저자, 페이지 수)
5. ✅ 수동 입력과 PDF 업로드 방식 병행 지원
6. ✅ PDF 업로드 UI 섹션 추가 (오른쪽 컬럼)
7. ✅ 책 등록 후 PDF 업로드 API 연동
8. ✅ 반응형 레이아웃 조정

**주요 기능:**
- PDF 파일 업로드 시 메타데이터 자동 추출 및 폼 필드 자동 채우기
- 수동 입력 모드와 PDF 모드 간 전환 가능
- PDF 업로드 성공/실패 상태 표시
- 책 등록 후 자동 PDF 업로드 처리
- PDF 업로드 실패 시에도 책 등록은 유지 (부분 성공 처리)

**UI/UX 개선:**
- 직관적인 PDF 업로드 인터페이스
- 자동 추출된 정보 표시 및 안내
- 사용자 피드백 메시지 (성공/실패/진행 상태)
- 기존 디자인과 일관성 유지

**에러 처리:**
- PDF 업로드 실패 시 적절한 에러 메시지
- 부분 성공 시나리오 처리 (책 등록 성공, PDF 업로드 실패)
- 사용자 친화적인 오류 안내
</info added on 2025-07-07T03:31:31.278Z>

