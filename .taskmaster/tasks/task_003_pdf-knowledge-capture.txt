# Task ID: 3
# Title: Integrate PDF Viewer and Implement Highlighting in TS Reading Session
# Status: done
# Dependencies: 1, 2
# Priority: high
# Description: Integrate a PDF viewer into the TS reading session page using react-pdf and implement a rounded-corner highlighting feature using SVG overlays. This includes text selection, coordinate calculation, and PDF note modal invocation.
# Details:
1. Integrate the react-pdf library into the TS reading session page.
2. Implement an SVG overlay to enable rounded-corner highlighting functionality.
3. Implement text selection functionality within the PDF viewer.
4. Calculate text coordinates upon selection for highlighting purposes.
5. Implement a PDF note modal that is invoked upon text selection, allowing users to add notes to highlighted sections.
6. Ensure the highlighting feature is visually appealing with rounded corners and a subtle color scheme.
7. Optimize the PDF viewer for performance, ensuring smooth scrolling and rendering even with large PDF documents.
8. Implement error handling for cases where PDF loading fails or the PDF format is invalid.

# Test Strategy:
1. Load various PDF documents into the TS reading session page to test the PDF viewer integration.
2. Select text within the PDF viewer and verify that the rounded-corner highlighting is applied correctly.
3. Test the text selection functionality with different text sizes and fonts.
4. Verify that the correct text coordinates are calculated upon selection.
5. Invoke the PDF note modal and ensure that it displays correctly with the selected text.
6. Test the performance of the PDF viewer with large PDF documents, ensuring smooth scrolling and rendering.
7. Simulate PDF loading errors and invalid PDF formats to verify that the error handling is implemented correctly.

# Subtasks:
## 1. react-pdf 라이브러리 설치 및 설정 [done]
### Dependencies: None
### Description: react-pdf 라이브러리를 설치하고 프로젝트에서 사용할 수 있도록 기본 설정을 구성합니다.
### Details:
- react-pdf 및 필요한 peer dependencies 설치\n- PDF 뷰어 기본 컴포넌트 설정\n- TypeScript 타입 정의 추가\n- Worker 설정 및 최적화
<info added on 2025-07-07T03:36:49.893Z>
**구현 내용:**
1. ✅ react-pdf 라이브러리 설치 완료
2. ✅ @types/react-pdf TypeScript 타입 정의 설치 완료
3. ✅ PdfViewer.tsx 컴포넌트 생성 완료
4. ✅ PDF.js worker 설정 구현
5. ✅ 기본 PDF 뷰어 기능 구현

**주요 기능:**
- 완전한 PDF 문서 렌더링
- 페이지 네비게이션 (이전/다음 페이지)
- 줌 인/아웃 기능 (50% ~ 300%)
- 90도 회전 기능
- 텍스트 선택 지원 (onTextSelect 콜백)
- 로딩 상태 및 에러 핸들링
- 반응형 디자인

**UI/UX 특징:**
- Habitus33 사이버펑크 테마 적용
- 직관적인 컨트롤 버튼
- 실시간 페이지/줌 상태 표시
- 텍스트 선택 안내 메시지
- 부드러운 애니메이션 효과

**기술적 특징:**
- TypeScript 완전 지원
- React hooks 활용 (useState, useCallback, useRef, useEffect)
- 텍스트 선택 이벤트 처리
- 좌표 계산 기능 (하이라이트 준비)
- 에러 경계 처리
- 메모리 누수 방지
</info added on 2025-07-07T03:36:49.893Z>

## 2. TSReadingPage에 PDF 뷰어 통합 [done]
### Dependencies: 3.1
### Description: TSReadingPage 컴포넌트에 PDF 뷰어를 통합하여 PDF가 있는 책의 경우 조건부로 렌더링합니다.
### Details:
- TSReadingPage에서 책의 PDF 파일 존재 여부 확인\n- PDF가 있는 경우 PdfViewer 컴포넌트 렌더링\n- PDF 로딩 및 에러 상태 처리\n- 기존 TS 세션 플로우와의 호환성 유지
<info added on 2025-07-07T03:39:14.801Z>
**구현 내용:**
1. ✅ TSReadingPage에 PDF 뷰어 통합 완료
2. ✅ SessionData 타입에 PDF 정보 필드 추가 (pdfUrl, pdfFileSize)
3. ✅ PDF 뷰어 상태 관리 추가 (showPdfViewer, currentPdfPage, pdfError)
4. ✅ PDF 뷰어 토글 버튼 구현
5. ✅ 조건부 렌더링 구현 (PDF 있음/없음)
6. ✅ PDF 텍스트 선택 시 자동 일시정지 기능
7. ✅ PDF 에러 핸들링 및 사용자 안내

**주요 기능:**
- PDF가 있는 책: PDF 뷰어 토글 버튼 표시
- PDF가 없는 책: 기존 호흡 텍스트 유지
- PDF 뷰어 표시/숨기기 토글 기능
- 텍스트 선택 시 타이머 자동 일시정지
- PDF 로딩 에러 시 사용자 친화적 메시지

**UI/UX 특징:**
- 사이버펑크 테마 일관성 유지
- 직관적인 PDF 뷰어 토글 버튼
- 반응형 디자인 (최대 너비 4xl)
- 부드러운 상태 전환 애니메이션

**기술적 특징:**
- 기존 TS 세션 플로우와 완전 호환
- PDF URL 자동 구성 (API URL + 상대 경로)
- 메모리 효율적인 상태 관리
- 타입 안전성 보장

**다음 단계 준비:**
- 텍스트 선택 이벤트 핸들러 준비 완료
- 메모 모달 연동 준비 (Phase 4)
- 하이라이트 기능 연동 준비
</info added on 2025-07-07T03:39:14.801Z>

## 3. SVG 오버레이 하이라이트 시스템 구현 [done]
### Dependencies: 3.2
### Description: PDF 텍스트 위에 SVG 오버레이를 사용하여 둥근 모서리 하이라이트 기능을 구현합니다.
### Details:
- SVG 오버레이 컴포넌트 생성\n- 텍스트 좌표를 SVG 좌표로 변환\n- 둥근 모서리 하이라이트 렌더링\n- 하이라이트 상태 관리\n- 여러 하이라이트 지원
<info added on 2025-07-07T03:44:04.886Z>
**구현 내용:**
1. ✅ PDF 하이라이트 타입 정의 완료 (types/pdf.ts)
2. ✅ 하이라이트 유틸리티 함수 구현 (lib/pdfHighlightUtils.ts)
3. ✅ SVG 오버레이 하이라이트 컴포넌트 생성 (PdfHighlightOverlay.tsx)
4. ✅ PdfViewer에 하이라이트 시스템 통합 완료
5. ✅ 하이라이트 모드 토글 기능 구현
6. ✅ 둥근 모서리 하이라이트 렌더링 구현
7. ✅ 다중 하이라이트 지원

**주요 기능:**
- **하이라이트 생성**: 텍스트 선택 시 자동 하이라이트 생성
- **둥근 모서리**: SVG rect에 rx/ry 속성으로 세련된 모양
- **다중 색상 지원**: 6가지 하이라이트 색상 (yellow, green, blue, purple, pink, orange)
- **인터랙티브**: 클릭, 더블클릭, 우클릭 이벤트 지원
- **시각적 피드백**: 호버 시 투명도 변경 및 테두리 표시
- **메모 표시**: 메모가 있는 하이라이트에 작은 원 아이콘

**기술적 특징:**
- **좌표 변환**: DOM 좌표 → SVG 좌표 정확한 변환
- **성능 최적화**: MutationObserver로 컨테이너 변경 감지
- **반응형**: 스케일 변경 시 하이라이트 크기 자동 조정
- **페이지별 필터링**: 현재 페이지의 하이라이트만 렌더링
- **메모리 관리**: 컴포넌트 언마운트 시 이벤트 리스너 정리

**UI/UX 특징:**
- **하이라이트 모드 토글**: 노란색 아이콘으로 직관적 표시
- **상태별 안내 메시지**: 일반 모드와 하이라이트 모드 구분
- **부드러운 애니메이션**: 호버 및 상태 전환 효과
- **접근성**: 키보드 네비게이션 및 툴팁 지원

**다음 단계 준비:**
- 하이라이트 생성 이벤트 준비 완료
- 메모 모달 연동 준비 (Phase 4)
- TSReadingPage 통합 준비
</info added on 2025-07-07T03:44:04.886Z>

