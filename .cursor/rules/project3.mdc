---
description: 
globs: 
alwaysApply: false
---

 ### Habitus33 Engineering Principles & Practices v2.0

이 문서는 단순한 규칙 목록이 아닙니다. Habitus33의 브랜드 철학을 제품으로 구현하기 위한 구체적인 방법론, 프로세스, 그리고 자동화된 시스템의 청사진입니다. 우리의 목표는 주관적인 판단을 최소화하고, 모든 개발 활동이 측정 가능하며 일관된 고품질을 유지하도록 만드는 것입니다.

---

### **Part 1. 개발 생명주기: 아이디어에서 배포까지**

모든 코드는 예측 가능한 생명주기를 따릅니다. 이는 속도와 안정성을 모두 보장하는 첫걸음입니다.

**1.1. 작업 정의 (The Definition of "Ready")**
- **원칙:** 불명확한 요구사항에서 위대한 제품이 나올 수 없다.
- **실행 지침:**
    - 모든 개발 Task는 **Jira/Asana** 티켓으로 관리하며, 다음 요소를 반드시 포함해야 합니다. (`Ready for Dev` 상태의 조건)
        - **User Story:** "As a [user type], I want to [action], so that I can [benefit]." 형식으로 작성된 사용자 스토리
        - **Acceptance Criteria (AC):** 개발 완료를 판단할 수 있는 구체적인 성공/실패 조건 목록
        - **Figma Link:** 확정된 UI/UX 디자인 링크 (UI 변경이 있을 경우)
        - **User Impact:** 이 기능이 `제 1원칙: 사용자 경험`에 어떻게 기여하는지에 대한 서술

**1.2. 브랜치 및 커밋 전략 (Code & History Integrity)**
- **원칙:** 코드와 그 히스토리는 미래의 동료를 위한 가장 중요한 자산이다.
- **실행 지침:**
    - **Branch:** `main`을 중심으로 한 **Trunk-Based Development**를 지향하며, 짧은 생명주기를 가진 피처 브랜치를 사용합니다. (`feature/TICKET-123-brief-description`)
    - **Commit:** **Conventional Commits** V1.0.0 스펙을 **100% 준수**합니다. 이는 자동화된 Changelog 생성과 의미론적 버전 관리의 기반이 됩니다.
        - `feat:` (신규 기능), `fix:` (버그 수정), `docs:`, `style:`, `refactor:`, `perf:`, `test:` 등
    - **자동화:** `husky`와 `commitlint`를 도입하여, 커밋 메시지 컨벤션을 지키지 않은 커밋은 원천적으로 차단합니다.

**1.3. Pull Request (PR): 동료를 위한 최고의 설명서**
- **원칙:** 코드는 한번 작성되지만, 수십 번 읽힌다. PR은 리뷰어가 최소한의 노력으로 최대의 맥락을 파악할 수 있도록 작성되어야 한다.
- **실행 지침:**
    - PR 템플릿(`.github/pull_request_template.md`) 사용을 강제합니다.
    - **'What & Why':** 변경의 내용과 '왜' 이 변경이 필요한지를 명확히 서술합니다.
    - **Testing Strategy:** 어떻게 이 변경을 검증했는지 상세히 기술합니다. (Unit, Integration, E2E, Manual)
    - **Visuals:** UI 변경 시, **Before/After 스크린샷 또는 GIF** 첨부를 **의무화**합니다.
    - **자동화:**
        - `lint-staged`를 통해 PR에 포함된 파일만 `ESLint`, `Prettier`, `Stylelint` 검사를 실행하고, 통과하지 못하면 커밋을 막습니다.
        - `GitHub Actions`를 통해 모든 PR에 대해 Unit/Integration 테스트를 실행하고, 실패 시 Merge를 자동 차단합니다.

**1.4. 코드 리뷰: 품질을 높이는 동료의 지성**
- **원칙:** 코드 리뷰는 결함을 찾는 과정이 아니라, 더 나은 솔루션을 함께 만드는 협업의 과정이다. (참조: Google Engineering Practices)
- **실행 지침:**
    - **Author:** PR 생성 전, 반드시 **Self-Review**를 통해 명백한 오류나 오타를 수정합니다.
    - **Reviewer:**
        - **Nitpicks:** 스타일 등 사소한 지적은 `[Nit]` 접두사를 달아 중요하지 않음을 표시합니다.
        - **Suggestion:** 코드 변경을 제안할 때는 GitHub의 `Suggestion` 기능을 적극 활용하여 Author가 클릭 한 번으로 반영할 수 있도록 돕습니다.
        - **Blocking:** Merge를 막아야 할 만큼 치명적인 문제에는 `[Blocker]` 접두사를 사용합니다.
    - **프로세스:** 최소 **1명 이상의 동료**에게 `Approve`를 받아야만 Merge 가능합니다. 24시간 이상 리뷰가 지연될 경우, 팀 채널에 공유하여 리뷰를 독려합니다.

---

### **Part 2. 엔지니어링 원칙: 철학을 코드로 증명하기**

**제 1원칙: 사용자 경험 최우선 원칙 (The "Prompt-Free" Principle)**
- **실행 지침:**
    - **자동화:**
        - `eslint-plugin-jsx-a11y`를 설치하고 CI 과정에 포함시켜, 웹 접근성 규칙을 위반하는 코드는 PR 단계에서 차단합니다.
        - **UI 상태 관리:** `XState` 또는 `Zustand`와 같은 예측 가능한 상태 관리 라이브러리를 사용하여, 복잡한 UI에서 발생할 수 있는 엣지 케이스를 줄입니다.
    - **프로세스:** 3개 이상의 컴포넌트에 걸친 사용자 플로우 변경 시, PR 설명에 **Mermaid.js**를 이용한 간단한 **User Flow Diagram**을 포함해야 합니다.

**제 2원칙: AMFA 모듈화 원칙 (The "AMFA Modularity" Principle)**
- **실행 지침:**
    - **자동화:** `ESLint`의 `no-restricted-imports` 규칙을 설정하여, 각 모듈이 `index.ts`를 통하지 않고 내부 구현에 직접 접근하는 것을 금지합니다.
        - **예시:** `modules/memo-evolve/lib/internal.ts`로의 직접 import를 차단.
    - **프로세스:** 신규 모듈 생성 시, 해당 모듈의 책임과 외부 의존성을 기술한 **`README.md`** 파일을 모듈 루트에 생성하는 것을 의무화합니다.

**제 3원칙: 데이터 무결성 및 맥락 보존 원칙 (The "Context Integrity" Principle)**
- **실행 지침:**
    - **자동화:** API의 모든 Request Body와 Response Body는 **Zod 스키마**로 정의하고, 런타임에서 유효성을 검증합니다. 스키마와 다른 데이터가 오고 갈 경우, 에러를 발생시키고 로깅합니다.
    - **프로세스:** DB 스키마 변경 시, Prisma Migrate와 같은 검증된 마이그레이션 툴 사용을 의무화합니다. **'롤백(Rollback) 절차'**가 없는 마이그레이션 스크립트는 Merge될 수 없습니다.

**제 4원칙: 일관된 브랜드 경험 원칙 (The "Consistent Experience" Principle)**
- **실행 지침:**
    - **자동화:**
        - **Visual Regression Testing:** `Storybook`과 `Chromatic`을 연동하여, UI 컴포넌트의 시각적 변경이 발생하면 PR에서 자동으로 감지하고, 리뷰어의 승인을 받도록 강제합니다.
        - `Stylelint`를 설정하여, `tailwind.config.js`에 정의된 디자인 토큰(e.g., `theme.colors.primary`) 외의 매직 넘버(e.g., `#333333`) 사용을 금지합니다.
    - **프로세스:** 아이콘, 이미지 등 정적 에셋(Asset) 추가 시, `SVGO` 또는 `ImageOptim`을 CI에 통합하여 자동으로 최적화합니다.

**제 5원칙: 견고하고 확장 가능한 아키텍처 원칙 (The "Robust Architecture" Principle)**
- **실행 지침:**
    - **자동화:**
        - **Test Coverage:** `Jest`의 `--coverage` 옵션과 `Codecov`를 연동하여, PR이 전체 테스트 커버리지를 **감소시키면** 빌드가 실패하도록 설정합니다.
        - **Security Scanning:** `Snyk` 또는 `GitHub CodeQL`을 CI에 통합하여, 알려진 보안 취약점이 있는 의존성을 사용하거나 안전하지 않은 코드 패턴을 사용하면 PR을 자동 차단합니다.
    - **프로세스:**
        - **ADR (Architecture Decision Record):** 새로운 기술 스택 도입, 핵심 데이터 모델 변경 등 중요 아키텍처 결정은 반드시 **ADR** 문서로 기록하고 팀의 동의를 얻습니다.
        - **Monitoring:** 모든 신규 API Endpoint는 응답 시간(Latency), 에러율(Error Rate) 등 핵심 지표를 **Datadog/Sentry** 같은 모니터링 툴에 로깅하는 코드를 포함해야 합니다.

---

이 문서는 살아있습니다. 우리는 분기별 회고를 통해 이 원칙들을 지속적으로 검토하고, 더 나은 방향으로 개선해 나갈 것입니다.
